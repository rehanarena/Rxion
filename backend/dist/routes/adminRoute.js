"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const multer_1 = __importDefault(require("../middlewares/multer"));
const authAdmin_1 = __importDefault(require("../middlewares/authAdmin"));
const adminController_1 = require("../controllers/admin/adminController");
const adminService_1 = require("../services/admin/adminService");
const adminRepository_1 = require("../repositories/admin/adminRepository");
const doctorController_1 = require("../controllers/doctor/doctorController");
const doctorService_1 = require("../services/doctor/doctorService");
const DoctorRepository_1 = require("../repositories/doctor/DoctorRepository");
const doctorOTPRepository_1 = require("../repositories/doctor/doctorOTPRepository");
const reportController_1 = require("../controllers/admin/reportController");
const dashboardController_1 = require("../controllers/admin/dashboardController");
const dashboardRepository_1 = require("../repositories/admin/dashboardRepository");
const specialityRepository_1 = require("../repositories/admin/specialityRepository");
const specialityService_1 = require("../services/admin/specialityService");
const specialityController_1 = require("../controllers/admin/specialityController");
// Instantiate repositories
const adminRepository = new adminRepository_1.AdminRepository();
const doctorRepository = new DoctorRepository_1.DoctorRepository();
const doctorOTPRepository = new doctorOTPRepository_1.DoctorOTPRepository();
const dashboardRepository = new dashboardRepository_1.DashboardRepository();
const specialityRepository = new specialityRepository_1.SpecialityRepository();
// Create the service by injecting the repositories
const adminService = new adminService_1.AdminService(adminRepository);
const doctorService = new doctorService_1.DoctorService(doctorRepository, doctorOTPRepository);
const specialityService = new specialityService_1.SpecialityService(specialityRepository);
// Create the controller by injecting the service
const adminController = new adminController_1.AdminController(adminService);
const doctorController = new doctorController_1.DoctorController(doctorService);
const reportController = new reportController_1.ReportController(dashboardRepository);
const dashboardController = new dashboardController_1.DashboardController(dashboardRepository);
const specialityController = new specialityController_1.SpecialityController(specialityService);
const adminRouter = express_1.default.Router();
adminRouter.post("/login", adminController.loginAdmin.bind(adminController));
adminRouter.get("/metrics", authAdmin_1.default, dashboardController.getTotal.bind(dashboardController));
adminRouter.get("/revenue", authAdmin_1.default, dashboardController.getRevenue.bind(dashboardController));
adminRouter.get("/appointments-status", authAdmin_1.default, dashboardController.getStatusAppointment.bind(dashboardController));
adminRouter.get("/appointments-payment", authAdmin_1.default, dashboardController.getPaymentStatus.bind(dashboardController));
adminRouter.get("/top-doctors", authAdmin_1.default, dashboardController.getTopDoctors.bind(dashboardController));
adminRouter.post("/add-doctor", authAdmin_1.default, multer_1.default.single('image'), adminController.addDoctor.bind(adminController));
adminRouter.get("/specialties", specialityController.getSpecialties.bind(specialityController));
adminRouter.post("/add-specialties", specialityController.addSpecialty.bind(specialityController));
adminRouter.delete("/delete-specialties/:specialtyId", specialityController.deleteSpecialty.bind(specialityController));
adminRouter.put("/edit-specialties/:specialtyId", specialityController.editSpecialty.bind(specialityController));
adminRouter.get("/users", authAdmin_1.default, adminController.userList.bind(adminController));
adminRouter.patch("/users/block-unblock/:id", authAdmin_1.default, adminController.blockUnblockUser.bind(adminController));
adminRouter.patch("/doctors/block-unblock/:id", authAdmin_1.default, adminController.blockUnblockDoctor.bind(adminController));
adminRouter.get("/doctors", authAdmin_1.default, adminController.doctorList.bind(adminController));
adminRouter.post("/all-doctors", authAdmin_1.default, adminController.allDoctors.bind(adminController));
adminRouter.get("/doctor/:doctorId", authAdmin_1.default, adminController.getDoctors.bind(adminController));
adminRouter.post("/change-availability", authAdmin_1.default, doctorController.changeAvailability.bind(doctorController));
adminRouter.get("/appointments", authAdmin_1.default, adminController.appointmentsAdmin.bind(adminController));
adminRouter.post("/cancel-appointment", authAdmin_1.default, adminController.cancelAppointment.bind(adminController));
adminRouter.get("/reports", authAdmin_1.default, reportController.getAppointmentsReport.bind(reportController));
exports.default = adminRouter;
